copy8: jmp copy9 #!acb //copy8 c n2 n1 => copy9 c n1 n2
copy9: call zero3 2 one2 //copy9 c n1 n2 => zero3 c n1 (one2 n2)
copy10: call copy 1 copy11 //copy10 n c => copy n (copy11 c)
copy11: jmp copy12 #!cba //copy11 n1 n2 c => copy12 c n2 n1
copy12: call copy13 2 two2 //copy12 c n2 n1 => copy13 c n2 (two2 n1)
copy13: jmp copy14 #!acb //copy13 c n2 n1 => copy14 c n1 n2
copy14: call zero3 2 two2 //copy14 c n1 n2 => zero3 n2 c (two2 n1)
drop: call zero2 1 drop1 //drop n c => zero2 n (drop1 c)
drop1: group zero drop drop
inc: jmp inc1 #!ba //inc c n => inc n c
inc1: call zero2 1 inc2 //inc1 n c => zero2 n (inc2 c)
inc2: group inc3 inc4 inc5
inc3: call one2 1 zero //inc3 c => one2 c zero
inc4: jmp two2 #!ba //inc4 n c => two2 c n
inc5: jmp inc6 #!ba //inc5 n c => inc6 c n
inc6: call one2 1 inc //inc5 c n => one2 c (inc n)
add: jmp add1 #!bca //add c n1 n2 => add1 n1 n2 c
add1: call zero2 1 add2 //add1 n1 n2 c => zero2 n1 (add2 n2 c)
add2: group add3 add4 add6
add3: jmp zero2 #!ba //add3 n2 c => zero2 c n2 //0+n2 = n2
add4: jmp add5 #!ba //add4 n1 n2 c => add5 n2 n1 c
add5: call zero2 1 add8 //add5 n2 n1 c => zero2 n2 (add8 n1 c)
add6: jmp add7 #!ba //add6 n1 n2 c => add7 n2 n1 c
add7: call zero2 1 add9 //zadd7 n2 n1 c => zero2 n2 (add9 n1 c)
add8: group add10 add12 add15
add9: group add19 add15 add21
add10: jmp add11 #!ba //add10 n c => add11 c n //2*n1+1 + 0 = 2*n1+1
add11: call zero2 1 one2 //add11 c n => zero2 c (one2 n)
add12: call add1 2 add13 //add12 n1 n2 c => add1 n1 n2 (add13 c) //2*n1+1 + 2*n2+1 = 2*(n1+n2) + 2
add13: jmp add14 #!ba //add13 n c => add14 c n
add14: call zero2 1 two2 //add14 c n => zero2 c (two2 n)
add15: call add1 2 add16 //add15 n1 n2 c => add1 n1 n2 (add16 c) //2*n1+2 + 2*n2+1 = 2*(n1+n2+1) + 1
add16: jmp add17 #!ba //add16 n c => add17 c n
add17: call add18 1 inc //add17 c n => add18 c (inc n)
add18: call zero2 1 one2 //add18 c n => zero2 c (one2 n)
add19: jmp add20 #!ba //add19 n c => add20 c n //0 + 2*n2+2 = 2*n2+2
add20: call zero2 1 two2 //add11 c n => zero2 c (two2)
add21: call add1 2 add22 //add21 n1 n2 c => add1 n1 n2 (add22 c) //2*n1+2 +2*n2+2 = 2*(n1+n2+1) + 2
add22: jmp add23 #!ba //add22 n c => add23 c n
add23: call add24 1 inc //add23 c n => add24 c (inc n)
add24: call zero2 1 two2 //add24 c n => zero2 c (two2 n)
test_copy: call test_copy1 1 from //test_copy c n => test_copy1 c (from n)
test_copy1: jmp test_copy2 #!ba //test_copy1 c n => test_copy2 n c
test_copy2: call copy 1 test_copy3 //test_copy2 n c => copy n (test_copy3 c)
test_copy3: call count 1 test_copy4 //test_copy3 n1 n2 c => count n1 (test_copy4 n2 c)
test_copy4: jmp test_copy5 #!ba //test_copy4 n1 n2 c => test_copy5 n2 n1 c
test_copy5: call count 1 test_copy6 //test_copy5 n2 n1 c => count n2 (test_copy6 n1 c)
test_copy6: jmp zero3 #!ba //test_copy6 n c => zero3 c n
test_drop1: jmp drop #!ba
test_drop: call test_drop1 1 from
test_inc2: jmp count #!ba
test_inc1: call test_inc2 1 inc
test_inc: call test_inc1 1 from
test_add: call test_add1 2 from //test_add c n1 n2 => test_add1 c n1 (from n2)
test_add1: jmp test_add2 #!acb //test_add1 c n1 n2 => test_add2 c n2 n1
test_add2: call test_add3 2 from //test_add2 c n2 n1 => test_add3 c n2 (from n1)
test_add3: jmp test_add4 #!cba //test_add3 c n2 n1 => test_add4 n1 n2 c
test_add4: call add1 2 count //test_add4 n1 n2 c => add1 n1 n2 (count c)
set export test_copy
set export test_drop
set export test_inc
set export test_add
compile bint
save bint.json
exit
fact: call fact1 2 fact19 //fact c n => fact1 c n fact19
fact1: call fact2 3 zero //fact1 c n f => fact2 c n f zero
fact2: jmp fact3 #!ba //fact2 c n f z => fact3 n c f z
fact3: call copy_int 1 fact4 //fact3 n c f z => copy_int n (fact4 c f z)
fact4: jmp fact5 #!aecdb //fact4 n1 n2 c f z => fact5 n1 z c f n2
fact5: call eq 2 fact6 //fact5 n1 z c f n2 => eq n1 z (fact6 c f n2)
fact6: group fact7 fact11
fact7: jmp fact8 #!cba //fact7 c f n => fact8 n f c
fact8: call drop_int 1 fact9 //fact8 n f c => drop_int n (fact9 f c)
fact9: call fact25 1 fact10 //fact9 f c => fact25 f (fact10 c)
fact10: call fact23 1 one //fact10 c => fact23 c one
fact11: call fact12 3 one //fact11 c f n => fact12 c f n one
fact12: jmp fact13 #!cba //fact12 c f n o => fact13 n f c o
fact13: call copy_int 1 fact14 //fact13 n f c o => copy_int n (fact14 f c o)
fact14: jmp fact15 #!aecdb //fact14 n1 n2 f c o => fact15 n1 o f c n2
fact15: call minus 2 fact16 //fact15 n1 o f c n2 => minus n1 o (fact16 f c n2)
fact16: jmp fact17 #!ba //fact16 n1 f c n2 => fact17 f n1 c n2
fact17: call fact24 2 fact18 //fact17 f n1 c n2 => fact24 f n1 (fact18 c n2)
fact18: jmp mul #!acb //fact18 n1 c n2 => mul n1 n2 c
fact19: group fact fact23
fact20: ret 0
fact22: ret 1
fact23: jmp fact20 #!ba
fact24: jmp fact20 #!cba
fact25: jmp fact22 #!ba
set export fact
save fact.json
exit
load fact.json
save fact.json
load bint.json
exit
load bint.json
save bint.json
exit
